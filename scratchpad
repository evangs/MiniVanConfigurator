===9-14-2017===
if key_type == 'modkey' or key_type == 'combokey':
    return '{}({})'.format(key_secondary, key_value)

if key_type == 'tapkey':
    if key_secondary[1:].isdigit():
        return 'LT({}, {})'.format(key_secondary[1:], key_value)
    return '{}_T({})'.format(key_secondary, key_value)

LAYER_TYPE_MAP = {
    'momentary': 'MO',
    'toggle': 'TG',
    'direct': 'TO',
    'taptoggle': 'TT',
    'setdefaultlayer': 'DF'
}

if LAYER_TYPE_MAP.has_key(key_type):
    return '{}({})'.format(LAYER_TYPE_MAP[key_type], key_value[1:])

if key_type == 'oneshotmod' || key_type == 'oneshotlayer':
    if key_value[1:].isdigit():
        return 'OSL({})'.format(key_value[1:])
    return 'OSM({})'.format(key_value[1:])

if key_type == 'unicode':
    return 'UC({})'.format(key_value)





combokey
    HYPR
    MEH
    LCAG
    ALTG
    SCMD
    LCA

tapkey
    C_S
    MEH
    LCAG
    RCAG
    ALL
    SCMD
    LCA

{value: 'TILD', display: '~'},
{value: 'EXLM', display: '!'},
{value: 'AT', display: '@'},
{value: 'HASH', display: '#'},
{value: 'DLR', display: '$'},
{value: 'PERC', display: '%'},
{value: 'CIRC', display: '^'},
{value: 'AMPR', display: '&'},
{value: 'ASTR', display: '*'},
{value: 'LPRN', display: '('},
{value: 'RPRN', display: ')'},
{value: 'UNDS', display: '_'},
{value: 'PLUS', display: '+'},
{value: 'LCBR', display: '{'},
{value: 'RCBR', display: '}'},
{value: 'LT', display: '<'},
{value: 'GT', display: '>'},
{value: 'COLN', display: ':'},
{value: 'DQT', display: '"'},
{value: 'PIPE', display: '|'},
{value: 'QUES', display: '?'},



===9-12-2017===
template += '#define BACKLIGHT_LEVELS  {}\n'.format(config.get('backlightLevels'))
template += '#define BACKLIGHT_PIN {}\n'.format(config.get('backlightPin'))

template += '#define DEBOUNCING_DELAY  {}\n'.format(config.get('debouncingDelay'))
template += '#define TAPPING_TERM      {}\n'.format(config.get('tappingTerm'))

if config.get('lockingSupportEnable'):
  template += '#define LOCKING_SUPPORT_ENABLE\n'
if config.get('lockingResyncEnable'):
  template += '#define LOCKING_RESYNC_ENABLE\n'

template += '#define IS_COMMAND() ( \\n'
template += '    keyboard_report->mods == (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT)) \\n'
template += ')\n'

if config.get('noDebug'):
  template += '#define NO_DEBUG\n'

if config.get('noPrint'):
  template += '#define NO_PRINT\n'

if config.get('noActionLayer'):
  template += '#define NO_ACTION_LAYER\n'

if config.get('noActionTapping'):
  template += '#define NO_ACTION_TAPPING\n'

if config.get('noActionOneshot'):
  template += '#define NO_ACTION_ONESHOT'

if config.get('noActionMacro'):
  template += '#define NO_ACTION_MACRO\n'

if config.get('noActionFunction'):
  template += '#define NO_ACTION_FUNCTION\n'

template += '#endif'



def buildRules(rules):
  template =  'MCU = {}\n'.format(rules.get('mcu'))
  template += 'F_CPU = {}\n'.format(rules.get('processorFrequency'))
  template += 'ARCH = {}\n'.format(rules.get('architecture'))
  template += 'F_USB = {}\n'.format(rules.get('inputClockFrequency'))

  template += 'OPT_DEFS += -DINTERRUPT_CONTROL_ENDPOINT\n'
  template += 'OPT_DEFS += -DBOOTLOADER_SIZE={}\n'.format(rules.get('bootloaderSize'))

  if rules.get('bootmagicEnabled'):
    template += 'BOOTMAGIC_ENABLE = yes\n'

  if rules.get('mousekeyEnabled'):
    template += 'MOUSEKEY_ENABLE = yes\n'

  if rules.get('extrakeyEnabled'):
    template += 'EXTRAKEY_ENABLE = yes\n'

  if rules.get('consoleEnabled'):
    template += 'CONSOLE_ENABLE = yes\n'

  if rules.get('commandEnabled'):
    template += 'COMMAND_ENABLE = yes\n'

  if rules.get('sleepLedEnabled'):
    template += 'SLEEP_LED_ENABLE = yes\n'

  if rules.get('nkroEnabled'):
    template += 'NKRO_ENABLE = yes\n'

  if rules.get('backlightEnabled'):
    template += 'BACKLIGHT_ENABLE = yes\n'



def buildKeyboardHeader(keymap):
  tmp = []
  for row in keymap.get('keys'):
    tmp.append(row.join(', '))

  kmap = tmp.join(', ')

  template =  '#ifndef KEYBOARD_H\n'
  template += '#define KEYBOARD_H\n'
  template += '#include "quantum.h"\n'

  template += '#define KEYMAP({}) { \'.format(kmap)

  for row in keymap.get('placements'):
    template += '{ {} }, \'.format(row.join(', '))

  template += '}\n#endif'
